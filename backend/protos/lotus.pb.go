// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/lotus.proto

package backend

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Lot struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Address              string   `protobuf:"bytes,3,opt,name=Address,proto3" json:"Address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Lot) Reset()         { *m = Lot{} }
func (m *Lot) String() string { return proto.CompactTextString(m) }
func (*Lot) ProtoMessage()    {}
func (*Lot) Descriptor() ([]byte, []int) {
	return fileDescriptor_2aace03ecbbb4cb2, []int{0}
}

func (m *Lot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Lot.Unmarshal(m, b)
}
func (m *Lot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Lot.Marshal(b, m, deterministic)
}
func (m *Lot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Lot.Merge(m, src)
}
func (m *Lot) XXX_Size() int {
	return xxx_messageInfo_Lot.Size(m)
}
func (m *Lot) XXX_DiscardUnknown() {
	xxx_messageInfo_Lot.DiscardUnknown(m)
}

var xxx_messageInfo_Lot proto.InternalMessageInfo

func (m *Lot) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Lot) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Lot) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func init() {
	proto.RegisterType((*Lot)(nil), "backend.Lot")
}

func init() { proto.RegisterFile("protos/lotus.proto", fileDescriptor_2aace03ecbbb4cb2) }

var fileDescriptor_2aace03ecbbb4cb2 = []byte{
	// 144 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0x28, 0xca, 0x2f,
	0xc9, 0x2f, 0xd6, 0xcf, 0xc9, 0x2f, 0x29, 0x2d, 0xd6, 0x03, 0x73, 0x84, 0xd8, 0x93, 0x12, 0x93,
	0xb3, 0x53, 0xf3, 0x52, 0x94, 0x9c, 0xb9, 0x98, 0x7d, 0xf2, 0x4b, 0x84, 0xf8, 0xb8, 0x98, 0x3c,
	0x5d, 0x24, 0x18, 0x15, 0x18, 0x35, 0x98, 0x83, 0x98, 0x3c, 0x5d, 0x84, 0x84, 0xb8, 0x58, 0xfc,
	0x12, 0x73, 0x53, 0x25, 0x98, 0x14, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x21, 0x09, 0x2e, 0x76,
	0xc7, 0x94, 0x94, 0xa2, 0xd4, 0xe2, 0x62, 0x09, 0x66, 0xb0, 0x30, 0x8c, 0x6b, 0x64, 0xc8, 0xc5,
	0x0a, 0x36, 0x5c, 0x48, 0x83, 0x8b, 0xcb, 0x3d, 0xb5, 0xc4, 0x27, 0xbf, 0xc4, 0xa9, 0xd2, 0xd3,
	0x45, 0x88, 0x47, 0x0f, 0x6a, 0x8b, 0x9e, 0x4f, 0x7e, 0x89, 0x14, 0x0a, 0x2f, 0x89, 0x0d, 0xec,
	0x0e, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc6, 0x9b, 0x81, 0x83, 0x9d, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LotusClient is the client API for Lotus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LotusClient interface {
	GetLotByID(ctx context.Context, in *Lot, opts ...grpc.CallOption) (*Lot, error)
}

type lotusClient struct {
	cc *grpc.ClientConn
}

func NewLotusClient(cc *grpc.ClientConn) LotusClient {
	return &lotusClient{cc}
}

func (c *lotusClient) GetLotByID(ctx context.Context, in *Lot, opts ...grpc.CallOption) (*Lot, error) {
	out := new(Lot)
	err := c.cc.Invoke(ctx, "/backend.lotus/GetLotByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LotusServer is the server API for Lotus service.
type LotusServer interface {
	GetLotByID(context.Context, *Lot) (*Lot, error)
}

func RegisterLotusServer(s *grpc.Server, srv LotusServer) {
	s.RegisterService(&_Lotus_serviceDesc, srv)
}

func _Lotus_GetLotByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Lot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LotusServer).GetLotByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/backend.lotus/GetLotByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LotusServer).GetLotByID(ctx, req.(*Lot))
	}
	return interceptor(ctx, in, info, handler)
}

var _Lotus_serviceDesc = grpc.ServiceDesc{
	ServiceName: "backend.lotus",
	HandlerType: (*LotusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLotByID",
			Handler:    _Lotus_GetLotByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/lotus.proto",
}
